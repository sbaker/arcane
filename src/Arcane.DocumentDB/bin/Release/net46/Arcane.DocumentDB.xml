<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arcane.DocumentDB</name>
    </assembly>
    <members>
        <member name="T:Arcane.DocumentDB.CollectionIdProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Arcane.DocumentDB.CollectionIdProvider.Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arcane.DocumentDB.CollectionIdProvider.SetDefaultFactory(Arcane.DocumentDB.ICollectionIdProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Arcane.DocumentDB.CollectionIdProvider.GetId``1(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="databaseId"></param>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="T:Arcane.DocumentDB.DatabaseQueryConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arcane.DocumentDB.DatabaseQueryConfig.#ctor">
            <summary>
            Creates an instance of this class using the default <see cref="P:Arcane.DocumentDB.CollectionIdProvider.Default"/>.
            </summary>
        </member>
        <member name="M:Arcane.DocumentDB.DatabaseQueryConfig.#ctor(Arcane.DocumentDB.ICollectionIdProvider)">
            <summary>
            Creates an instance of this class using the specified <paramref name="provider"/>.
            </summary>
        </member>
        <member name="P:Arcane.DocumentDB.DatabaseQueryConfig.Provider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Arcane.DocumentDB.DatabaseQueryConfig.Client">
            <summary>
            
            </summary>
        </member>
        <member name="P:Arcane.DocumentDB.DatabaseQueryConfig.Database">
            <summary>
            
            </summary>
        </member>
        <member name="P:Arcane.DocumentDB.DatabaseQueryConfig.FeedOptions">
            <summary>
            The <see cref="P:Arcane.DocumentDB.DatabaseQueryConfig.FeedOptions"/> to pass along for the current requests.
            </summary>
        </member>
        <member name="P:Arcane.DocumentDB.DatabaseQueryConfig.RequestOptions">
            <summary>
            The <see cref="P:Arcane.DocumentDB.DatabaseQueryConfig.RequestOptions"/> to pass along for the current requests.
            </summary>
        </member>
        <member name="P:Arcane.DocumentDB.DatabaseQueryConfig.EnableAutoIdGeneration">
            <summary>
            The <see cref="P:Arcane.DocumentDB.DatabaseQueryConfig.FeedOptions"/> to pass along for the current requests.
            </summary>
        </member>
        <member name="M:Arcane.DocumentDB.DatabaseQueryConfig.GetId``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Arcane.DocumentDB.DocumentDbQuery`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQuery`1.#ctor(System.Linq.IQueryable{`0},Arcane.IQueryContext,Arcane.DocumentDB.DatabaseQueryConfig)">
            <summary>
            
            </summary>
            <param name="innerQuery"></param>
            <param name="context"></param>
            <param name="config"></param>
        </member>
        <member name="P:Arcane.DocumentDB.DocumentDbQuery`1.Config">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQuery`1.AddCore(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQuery`1.AddCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQuery`1.DeleteCore(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQuery`1.DeleteCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQuery`1.UpdateCore(`0)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQuery`1.UpdateCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="entities"></param>
        </member>
        <member name="T:Arcane.DocumentDB.DocumentDbQueryContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQueryContext.#ctor(Arcane.DocumentDB.DatabaseQueryConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQueryContext.Query``1(System.String)">
            <summary>
            When implemented in a derived class, creates a query for the given <typeparamref name="T"/> model representing a table or collection.
            </summary>
            <typeparam name="T">The type representing the table or collection.</typeparam>
            <param name="name">Optional, parameter is only used in some implementations of the <see cref="T:Arcane.IQueryContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQueryContext.EvaluateExpression(System.Linq.Expressions.Expression)">
            <summary>
            When implemented in a derived class will evaluate the <paramref name="expression"/> if <see cref="P:Arcane.QueryContext.SuppressCompatabilityErrors"/> is false.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Arcane.DocumentDB.DocumentDbQueryContext.DisposeCore(System.Boolean)">
            <summary>
            Disposes of the current instance's <see cref="P:Arcane.QueryContext`1.Context"/> if it implements IDisposable.
            </summary>
            <param name="disposing">True if the object is wrapped in a using, false if the GC is collecting the current instance.</param>
        </member>
        <member name="T:Arcane.DocumentDB.ICollectionIdProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arcane.DocumentDB.ICollectionIdProvider.GetId``1(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="databaseId"></param>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
        <member name="T:Arcane.DocumentDB.TypeNameCollectionIdProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Arcane.DocumentDB.TypeNameCollectionIdProvider.GetId``1(System.String,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="databaseId"></param>
            <param name="collectionName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
