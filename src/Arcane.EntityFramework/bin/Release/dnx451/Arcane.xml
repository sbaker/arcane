<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arcane</name>
    </assembly>
    <members>
        <member name="T:Arcane.ArcaneQueryable`1">
            <summary>
            The type that wraps the external <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.#ctor(System.Linq.IQueryable{`0},Arcane.IQueryContext)">
            <summary>
            Initializes an instance of the <see cref="T:Arcane.ArcaneQueryable`1"/>
            </summary>
            <param name="innerQuery">The <see cref="T:System.Linq.IQueryable`1"/> this instance wraps.</param>
            <param name="context">The context that created this instance.</param>
        </member>
        <member name="P:Arcane.ArcaneQueryable`1.System#Linq#IQueryable#ElementType">
            <summary>Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable" /> is executed.</summary>
            <returns>A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</returns>
        </member>
        <member name="P:Arcane.ArcaneQueryable`1.System#Linq#IQueryable#Expression">
            <summary>Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.</summary>
            <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</returns>
        </member>
        <member name="P:Arcane.ArcaneQueryable`1.System#Linq#IQueryable#Provider">
            <summary>Gets the query provider that is associated with this data source.</summary>
            <returns>The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</returns>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <summary>Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</summary>
            <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
            <param name="expression">An expression tree that represents a LINQ query.</param>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</summary>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</returns>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1" /> that is returned.</typeparam>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>Executes the query represented by a specified expression tree.</summary>
            <returns>The value that results from executing the specified query.</returns>
            <param name="expression">An expression tree that represents a LINQ query.</param>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>Executes the strongly-typed query represented by a specified expression tree.</summary>
            <returns>The value that results from executing the specified query.</returns>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Arcane.ArcaneQueryable`1.InnerQuery">
            <summary>
            The inner <see cref="T:System.Linq.IQueryable`1"/> that this instance wraps.
            </summary>
        </member>
        <member name="P:Arcane.ArcaneQueryable`1.Context">
            <summary>
            The <see cref="T:Arcane.IQueryContext"/> that created this instance.
            </summary>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Calls to the <seealso cref="P:Arcane.ArcaneQueryable`1.InnerQuery"/>'s <see cref="T:System.Linq.IQueryProvider"/> 
            to create a new <see cref="T:System.Linq.IQueryable`1"/> and returns a new instance wrapping the newly created query.
            
            Also, if <see cref="P:Arcane.IQueryContext.SuppressCompatabilityErrors"/> is false it will call to
            the parent context to examine the provided expression for cross-provider compatability.
            </summary>
            <typeparam name="TElement"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.CreateQueryCore``1(System.Linq.IQueryable{``0})">
            <summary>
            Wraps the <paramref name="innerQuery"/> in a <see cref="T:Arcane.ArcaneQueryable`1"/> instance of <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="TElement">The type of element the <see cref="T:System.Linq.IQueryable`1"/> wraps.</typeparam>
            <param name="innerQuery">The <see cref="T:System.Linq.IQueryable`1"/> innerQuery to wrap.</param>
            <returns></returns>
        </member>
        <member name="M:Arcane.ArcaneQueryable`1.ToString">
            <summary>
            Returns the <see cref="P:Arcane.ArcaneQueryable`1.InnerQuery"/>.ToString() result.
            </summary>
            <returns>A <see cref="T:System.String"/></returns>
        </member>
        <member name="T:Arcane.ContextFactory`1">
            <summary>
            Provides a static factory for creating <typeparamref name="TContext"/> instance.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="F:Arcane.ContextFactory`1.OnContextNeeded">
            <summary>
            The method called when a <typeparamref name="TContext"/> is needed.
            </summary>
        </member>
        <member name="T:Arcane.GlobalSettings">
            <summary>
            Allows for centralized settings.
            </summary>
        </member>
        <member name="P:Arcane.GlobalSettings.SuppressCompatibilityErrors">
            <summary>
            A setting to suppress compatability errors given to every <see cref="T:Arcane.IQueryContext"/> created which can then be overwritten per context.
            </summary>
        </member>
        <member name="T:Arcane.IQuery`1">
            <summary>
            An interface that represents a wrapped <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Arcane.IQuery`1.Context">
            <summary>
            The <see cref="T:Arcane.IQueryContext"/> responsible for creating this instance.
            </summary>
        </member>
        <member name="M:Arcane.IQuery`1.Add(`0)">
            <summary>
            Add a new <typeparamref name="T"/> entity to the backing database or collection.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Arcane.IQuery`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all the new <typeparamref name="T"/> entities to the backing database or collection.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:Arcane.IQuery`1.Delete(`0)">
            <summary>
            Deletes the <typeparamref name="T"/> entity from the backing database or collection.
            </summary>
            <param name="entity">The entity to delete.</param>
        </member>
        <member name="M:Arcane.IQuery`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deletes all the <typeparamref name="T"/> entities from the backing database or collection.
            </summary>
            <param name="entities">The entities to delete.</param>
        </member>
        <member name="M:Arcane.IQuery`1.Update(`0)">
            <summary>
            Updates the <typeparamref name="T"/> entity in the backing database or collection.
            </summary>
            <param name="entity">The entity to update.</param>
        </member>
        <member name="M:Arcane.IQuery`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates all the <typeparamref name="T"/> entities in the backing database or collection.
            </summary>
            <param name="entities">The entities to update.</param>
        </member>
        <member name="T:Arcane.IQueryContext">
            <summary>
            Provides an interface for an abstraction around access to <see cref="!:IQueryable&lt;T&gt;" /> data entity classes.
            </summary>
        </member>
        <member name="P:Arcane.IQueryContext.SuppressCompatabilityErrors">
            <summary>
            When set to true, will suppress cross provider compatable issues. (Note: this is not yet implemented)
            </summary>
        </member>
        <member name="M:Arcane.IQueryContext.Query``1(System.String)">
            <summary>
            When implemented in a derived class, creates a query for the given <typeparamref name="T"/> model representing a table or collection.
            </summary>
            <typeparam name="T">The type representing the table or collection.</typeparam>
            <param name="name">Optional, parameter is only used in some implementations of the <see cref="T:Arcane.IQueryContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Arcane.IQueryContext.EvaluateExpression(System.Linq.Expressions.Expression)">
            <summary>
            If <see cref="P:Arcane.IQueryContext.SuppressCompatabilityErrors"/> is false, will evaluate the current expression for common cross provider issues.
            </summary>
            <param name="expression">The expression to evaluate.</param>
        </member>
        <member name="T:Arcane.ISaveChanges">
            <summary>
            Represents a <see cref="T:Arcane.IQueryContext"/> that can save changes.
            </summary>
        </member>
        <member name="M:Arcane.ISaveChanges.SaveChanges">
            <summary>
            Calls to the wrapped implementation to persist the changes made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arcane.ISaveChanges.SaveChangesAsync">
            <summary>
            Asynchronously calls to the wrapped implementation to persist the changes made.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for later evaluation.</returns>
        </member>
        <member name="T:Arcane.Query`1">
            <summary>
            An abstract implementation of <see cref="T:Arcane.IQuery`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Arcane.Query`1.#ctor(System.Linq.IQueryable{`0},Arcane.IQueryContext)">
            <summary>
            Initializes an instance using the provided <paramref name="innerQuery"/> and <paramref name="context"/>.
            </summary>
            <param name="innerQuery"></param>
            <param name="context"></param>
        </member>
        <member name="M:Arcane.Query`1.Arcane#IQuery{T}#Add(`0)">
            <summary>
            Add a new <typeparamref name="T"/> entity to the backing database or collection.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Arcane.Query`1.Arcane#IQuery{T}#Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add all the new <typeparamref name="T"/> entities to the backing database or collection.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:Arcane.Query`1.Arcane#IQuery{T}#Delete(`0)">
            <summary>
            Deletes the <typeparamref name="T"/> entity from the backing database or collection.
            </summary>
            <param name="entity">The entity to delete.</param>
        </member>
        <member name="M:Arcane.Query`1.Arcane#IQuery{T}#Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deletes all the <typeparamref name="T"/> entities from the backing database or collection.
            </summary>
            <param name="entities">The entities to delete.</param>
        </member>
        <member name="M:Arcane.Query`1.Arcane#IQuery{T}#Update(`0)">
            <summary>
            Updates the <typeparamref name="T"/> entity in the backing database or collection.
            </summary>
            <param name="entity">The entity to update.</param>
        </member>
        <member name="M:Arcane.Query`1.Arcane#IQuery{T}#Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates all the <typeparamref name="T"/> entities in the backing database or collection.
            </summary>
            <param name="entities">The entities to update.</param>
        </member>
        <member name="M:Arcane.Query`1.AddCore(`0)">
            <summary>
            When implemented in a derived class, adds a new <typeparamref name="T"/> entity to the backing database or collection.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Arcane.Query`1.AddCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            When implemented in a derived class, adds all the new <typeparamref name="T"/> entities to the backing database or collection.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:Arcane.Query`1.DeleteCore(`0)">
            <summary>
            When implemented in a derived class, deletes the <typeparamref name="T"/> entity from the backing database or collection.
            </summary>
            <param name="entity">The entity to delete.</param>
        </member>
        <member name="M:Arcane.Query`1.DeleteCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            When implemented in a derived class, deletes all the <typeparamref name="T"/> entities from the backing database or collection.
            </summary>
            <param name="entities">The entities to delete.</param>
        </member>
        <member name="M:Arcane.Query`1.UpdateCore(`0)">
            <summary>
            When implemented in a derived class, updates the <typeparamref name="T"/> entity in the backing database or collection.
            </summary>
            <param name="entity">The entity to update.</param>
        </member>
        <member name="M:Arcane.Query`1.UpdateCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            When implemented in a derived class, updates all the <typeparamref name="T"/> entities in the backing database or collection.
            </summary>
            <param name="entities">The entities to update.</param>
        </member>
        <member name="T:Arcane.QueryContext">
            <summary>
            An abstract implementation of <see cref="T:Arcane.IQueryContext"/> with some basic functionality.
            </summary>
        </member>
        <member name="M:Arcane.QueryContext.Finalize">
            <summary>
            Deconstructs the current instance and allows for disposing of any resources.
            </summary>
        </member>
        <member name="P:Arcane.QueryContext.IsDisposed">
            <summary>
            Returns true, if the current instance has been disposed, false otherwise.
            </summary>
        </member>
        <member name="P:Arcane.QueryContext.SuppressCompatabilityErrors">
            <summary>
            A setting to suppress cross provider compatability issues.
            </summary>
        </member>
        <member name="M:Arcane.QueryContext.Dispose">
            <summary>
            Disposes of the current instance's resources.
            </summary>
        </member>
        <member name="M:Arcane.QueryContext.Query``1(System.String)">
            <summary>
            When implemented in a derived class, creates a query for the given <typeparamref name="T"/> model representing a table or collection.
            </summary>
            <typeparam name="T">The type representing the table or collection.</typeparam>
            <param name="name">Optional, parameter is only used in some implementations of the <see cref="T:Arcane.IQueryContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Arcane.QueryContext.Arcane#IQueryContext#EvaluateExpression(System.Linq.Expressions.Expression)">
            <summary>
            If <see cref="P:Arcane.IQueryContext.SuppressCompatabilityErrors"/> is false, will evaluate the current expression for common cross provider issues.
            </summary>
            <param name="expression">The expression to evaluate.</param>
        </member>
        <member name="M:Arcane.QueryContext.EvaluateExpression(System.Linq.Expressions.Expression)">
            <summary>
            When implemented in a derived class will evaluate the <paramref name="expression"/> if <see cref="P:Arcane.QueryContext.SuppressCompatabilityErrors"/> is false.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Arcane.QueryContext.DisposeCore(System.Boolean)">
            <summary>
            Disposes of the current instance's resources.
            </summary>
            <param name="disposing">True if the object is wrapped in a using, false if the GC is collecting the current instance.</param>
        </member>
        <member name="M:Arcane.QueryContext.SaveChangesCore">
            <summary>
            An empty implementation of <see cref="M:Arcane.ISaveChanges.SaveChanges"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arcane.QueryContext.SaveChangesCoreAsync">
            <summary>
            Asynchronously calls to the wrapped implementation to persist the changes made.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for later evaluation.</returns>
        </member>
        <member name="M:Arcane.QueryContext.Dispose(System.Boolean)">
            <summary>
            Disposes of the current instance's resources.
            </summary>
            <param name="disposing">True if the object is wrapped in a using, false if the GC is collecting the current instance.</param>
        </member>
        <member name="M:Arcane.QueryContext.Arcane#ISaveChanges#SaveChanges">
            <summary>
            Calls to the wrapped implementation to persist the changes made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arcane.QueryContext.Arcane#ISaveChanges#SaveChangesAsync">
            <summary>
            Asynchronously calls to the wrapped implementation to persist the changes made.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for later evaluation.</returns>
        </member>
        <member name="T:Arcane.QueryContext`1">
            <summary>
            An abstract implementation of <see cref="T:Arcane.IQueryContext"/> with some basic functionality and a strongly typed inner context.
            </summary>
        </member>
        <member name="M:Arcane.QueryContext`1.#ctor">
            <summary>
            When called from a derived class, initializes a new instance of the <see cref="T:Arcane.QueryContext`1"/> class.
            </summary>
        </member>
        <member name="M:Arcane.QueryContext`1.#ctor(`0)">
            <summary>
            When called from a derived class, initializes a new instance of the <see cref="T:Arcane.QueryContext`1"/> class unsing the provided <paramref name="context"/>.
            </summary>
            <param name="context">The context to wrap.</param>
        </member>
        <member name="P:Arcane.QueryContext`1.Context">
            <summary>
            The wrapped <typeparamref name="TContext"/>.
            </summary>
        </member>
        <member name="M:Arcane.QueryContext`1.DisposeCore(System.Boolean)">
            <summary>
            Disposes of the current instance's <see cref="P:Arcane.QueryContext`1.Context"/> if it implements IDisposable.
            </summary>
            <param name="disposing">True if the object is wrapped in a using, false if the GC is collecting the current instance.</param>
        </member>
    </members>
</doc>
