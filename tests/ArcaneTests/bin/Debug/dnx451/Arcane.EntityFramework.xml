<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arcane.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:Arcane.EntityFramework.EntityFrameworkQuery`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQuery`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0},Arcane.IQueryContext)">
            <summary>
            
            </summary>
            <param name="dbSet"></param>
            <param name="context"></param>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQuery`1.AddCore(`0)">
            <summary>
            When implemented in a derived class, adds a new <typeparamref name="T"/> entity to the backing database or collection.
            </summary>
            <param name="entity">The entity to add.</param>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQuery`1.AddCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            When implemented in a derived class, adds all the new <typeparamref name="T"/> entities to the backing database or collection.
            </summary>
            <param name="entities">The entities to add.</param>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQuery`1.DeleteCore(`0)">
            <summary>
            When implemented in a derived class, deletes the <typeparamref name="T"/> entity from the backing database or collection.
            </summary>
            <param name="entity">The entity to delete.</param>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQuery`1.DeleteCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            When implemented in a derived class, deletes all the <typeparamref name="T"/> entities from the backing database or collection.
            </summary>
            <param name="entities">The entities to delete.</param>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQuery`1.UpdateCore(`0)">
            <summary>
            When implemented in a derived class, updates the <typeparamref name="T"/> entity in the backing database or collection.
            </summary>
            <param name="entity">The entity to update.</param>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQuery`1.UpdateCore(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            When implemented in a derived class, updates all the <typeparamref name="T"/> entities in the backing database or collection.
            </summary>
            <param name="entities">The entities to update.</param>
        </member>
        <member name="T:Arcane.EntityFramework.EntityFrameworkQueryContext">
            <summary>
            An EntityFramework implementation of <see cref="T:Arcane.IQueryContext"/> wrapping the base <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.
            </summary>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQueryContext.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Arcane.EntityFramework.EntityFrameworkQueryContext`1">
            <summary>
            An EntityFramework implementation of <see cref="T:Arcane.IQueryContext"/> wrapping a generic <typeparamref name="TContext"/>.
            </summary>
            <typeparam name="TContext">The <typeparamref name="TContext"/> to encapsulate.</typeparam>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQueryContext`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQueryContext`1.Query``1(System.String)">
            <summary>
            When implemented in a derived class, creates a query for the given <typeparamref name="T"/> model representing a table or collection.
            </summary>
            <typeparam name="T">The type representing the table or collection.</typeparam>
            <param name="name">Optional, parameter is only used in some implementations of the <see cref="T:Arcane.IQueryContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQueryContext`1.EvaluateExpression(System.Linq.Expressions.Expression)">
            <summary>
            When implemented in a derived class will evaluate the <paramref name="expression"/> if <see cref="P:Arcane.QueryContext.SuppressCompatabilityErrors"/> is false.
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQueryContext`1.SaveChanges">
            <summary>
            Calls to the wrapped implementation to persist the changes made.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Arcane.EntityFramework.EntityFrameworkQueryContext`1.SaveChangesAsync">
            <summary>
            Asynchronously calls to the wrapped implementation to persist the changes made.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> for later evaluation.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Provides extension methods on <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddEntityFramework(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Arcane.IArcaneBuilder})">
            <summary>
            
            </summary>
            <param name="services"></param>
            <param name="builderAction"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ArcaneBuilderExtensions">
            <summary>
            Provides extension methods for configuring EntityFramework on top of Arcane.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IForBuilder`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.IForBuilder`1.Use``1">
            <summary>
            
            </summary>
            <typeparam name="TDbContext"></typeparam>
            <returns></returns>
        </member>
    </members>
</doc>
